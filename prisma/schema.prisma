generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model Article {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(200)
  summary      String?        @db.Text
  content      String         @db.Text
  coverUrl     String?        @db.VarChar(500) // 封面图URL
  viewCount    Int            @default(0)
  likeCount    Int           @default(0)
  commentCount Int           @default(0)
  status       ArticleStatus @default(DRAFT)
  category     ArticleCategory @relation(fields: [categoryId], references: [id])
  categoryId   Int
  author       User          @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]

  @@index([categoryId])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
}

model ArticleCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  sort        Int      @default(0)
  isEnabled   Boolean  @default(true)
  parentId    Int?
  parent      ArticleCategory?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children    ArticleCategory[] @relation("CategoryChildren")
  articles    Article[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique @db.VarChar(50)
  password       String    @db.VarChar(100)
  email          String    @unique @db.VarChar(100)
  nickname       String?   @db.VarChar(50)
  avatar         String?   @db.VarChar(500)
  avatarOriginal String?
  role           UserRole  @default(USER)
  status         UserStatus @default(ACTIVE)
  isDisabled     Boolean   @default(false)
  loginCount     Int       @default(0)
  lastLoginAt    DateTime?
  lastLoginIp    String?   @db.VarChar(45)
  bio            String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  wikis          Wiki[]
  approvedWikis  Wiki[]    @relation("ApprovedWikis")
  comments       Comment[]
  articles       Article[]

  commentLikes   CommentLike[]
  wikiTemplates  WikiTemplate[]    
  wikiComponents WikiComponent[]
  userApplyEditWiki UserApplyEditWiki[] // 用户发起的编辑申请
  componentHistories WikiComponentHistory[] // 组件编辑历史
  templateLikes  WikiTemplateLike[] // 添加模板点赞关系

  @@index([email])
  @@index([username])
}

enum UserRole {
  USER
  REVIEWER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

model Wiki {
  id               Int      @id @default(autoincrement())
  isMyCustomWiki   Boolean  @default(false)
  slogan           String?  @db.Text
  hot              Int      @default(0)
  name             String   @unique @db.VarChar(100)
  subdomain        String   @unique @db.VarChar(100)
  title            String   @db.VarChar(200)
  description      String   @db.Text
  keywords         String?  @db.Text
  metaDescription  String?  @db.Text
  backgroundImage  String?  @db.VarChar(200)
  logo             String?  @db.VarChar(200)
  primaryColor     String   @default("#000000") @db.VarChar(7)
  isPublic         Boolean  @default(false)
  allowComments    Boolean  @default(false)
  enableSearch     Boolean  @default(false)
  isShow           Boolean  @default(false)
  status           WikiStatus @default(PENDING)
  pageCount        Int      @default(0)
  contributorCount Int      @default(0)
  viewCount        Int      @default(0)
  creatorId        Int
  creator          User     @relation(fields: [creatorId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deletedAt        DateTime?
  approvedAt       DateTime?
  approvedById     Int?
  approvedBy       User?    @relation("ApprovedWikis", fields: [approvedById], references: [id])
  tags             String[]
  customDomain     String?  @unique @db.VarChar(100)
  contactInfo      String?  @db.VarChar(100)
  applyReason      String?  @db.Text
  license          String   @default("CC-BY-SA") @db.VarChar(50)
  rejectReason     String?  @db.Text
 
  wikiTemplates    WikiTemplate[]
  wikiComponents   WikiComponent[] 
  WikiApplyQuestions WikiApplyQuestions[]
  userApplyEditWiki UserApplyEditWiki[] // Wiki的编辑权限申请
  componentHistories WikiComponentHistory[] // 组件编辑历史
  menuBgImage String? @db.VarChar(200) // 菜单背景图片
}

enum WikiStatus {
  PENDING
  REJECTED
  DRAFT
  PUBLISHED
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  likeCount   Int      @default(0)
  isDeleted   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  article     Article? @relation(fields: [articleId], references: [id])
  templateId    Int?
  template      WikiTemplate?    @relation(fields: [templateId], references: [id])
  articleId   Int?
  // 评论回复功能（新增）
  parentComment  Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?     // 父评论ID（顶级评论为null）
  replies        Comment[] @relation("CommentReplies") // 子评论列表
  // 点赞关系
  likes         CommentLike[]
}

// wiki申请问答测试表模型
model WikiApplyQuestions {
  id                Int      @id @default(autoincrement())
  question          String   @db.Text // 问题内容
  options           String[]  // 问题选项数组
  correctAnswerIndex Int     // 正确答案索引（从0开始）
  createdAt         DateTime @default(now()) // 创建日期
  wiki              Wiki     @relation(fields: [wikiId], references: [id]) // 关联的wiki
  wikiId            Int     // wiki ID
  @@index([wikiId]) // 为wikiId添加索引优化查询
}

// 评论点赞关系表
model CommentLike {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}



enum WikiType {
  INDEX     // Wiki首页模板
  MODULE    // Wiki模块模板
  DETAIL    // Wiki详情页模板
}

// Wiki模板模型
model WikiTemplate {
  id                Int       @id @default(autoincrement())
  moduleName        String?   @db.VarChar(100) // 模块名称
  detailName        String?   @db.VarChar(100) // 详情名称
  description       String?   @db.Text // 模板描述可选
  wiki              Wiki      @relation(fields: [wikiId], references: [id])
  wikiId            Int      
  type              WikiType  @default(INDEX)
  lastSaved         DateTime  @default(now())
  createdAt         DateTime  @default(now())
  editor            User      @relation(fields: [editorId], references: [id])
  editorId          Int
  isEnabled         Boolean   @default(true)
  WikiComponent     WikiComponent[]
  viewCount         Int       @default(0)
  likeCount         Int       @default(0)
  Comment           Comment[]
  likes            WikiTemplateLike[]

  @@index([wikiId])
  @@index([type])
}


// 新增组件表
model WikiComponent {
  id          Int           @id @default(autoincrement())
  type        String // 组件类型
  wikiTemplate        WikiTemplate @relation(fields: [wikiTemplateId], references: [id])
  wikiTemplateId      Int
  name        String        @db.VarChar(100) // 组件名称
  props       Json          // 组件属性配置
  order       Int          // 排序
  isEnabled   Boolean      @default(true) // 是否启用
  wiki        Wiki         @relation(fields: [wikiId], references: [id])
  wikiId      Int
  editor      User         @relation(fields: [editorId], references: [id])
  editorId    Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      WikiComponentStatus @default(CREATE)
  histories   WikiComponentHistory[] // 组件的编辑历史记录

  @@index([wikiId, order]) // 添加索引以优化查询性能
}

enum WikiComponentStatus {
  CREATE
  DRAFT
  
}

// Wiki编辑权限申请表
model UserApplyEditWiki {
  id        Int      @id @default(autoincrement())
  wiki      Wiki     @relation(fields: [wikiId], references: [id])
  wikiId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  status    WikiEditorApplicationStatus @default(APPROVED)
  applyTime DateTime @default(now())
  contactInfo String? @db.VarChar(200) // 联系方式
  @@index([wikiId])
  @@index([userId])
}

enum WikiEditorApplicationStatus {

  APPROVED  // 已通过
  REJECTED  // 已拒绝
}

// 组件编辑类型枚举
enum WikiComponentEditType {
  CREATE    // 新增
  UPDATE    // 修改
  DELETE    // 删除
  
}

enum WikiComponentHistoryStatus {
  PENDING
  REJECTED
  ACCEPTED
  
}

// Wiki组件历史记录表
model WikiComponentHistory {
  id          Int                  @id @default(autoincrement())
  component   WikiComponent        @relation(fields: [componentId], references: [id])
  componentId Int
  wiki        Wiki                 @relation(fields: [wikiId], references: [id])
  wikiId      Int
  editor      User                 @relation(fields: [editorId], references: [id])
  editorId    Int
  editType    WikiComponentEditType
  status      WikiComponentHistoryStatus @default(PENDING)
  props       Json                 // 组件属性的历史记录
  updateTime    DateTime             @default(now())
  moduleName  String?              @db.VarChar(100) // 模块名称
  detailName  String?              @db.VarChar(100) // 详情名称

  @@index([componentId])
  @@index([wikiId])
  @@index([editorId])
}

// 配置项类型枚举
enum ConfigType {
  TEXT          // 单行文本
  TEXTAREA      // 多行文本
  IMAGE         // 单张图片
  MULTI_IMAGE   // 多张图片
  MULTI_TEXT    // 多行文本（带链接）
  MULTI_CONTENT // 多文本图片混合（带链接）
  RICH_TEXT     // 富文本编辑器
}

// 配置表
model Config {
  id          Int         @id @default(autoincrement())
  key         String      @unique @db.VarChar(100) // 配置键名
  title       String      @db.VarChar(100) // 配置名称
  type        ConfigType  // 配置类型
  description String?     @db.Text // 配置描述
  sort        Int         @default(0) // 排序
  isEnabled   Boolean     @default(true) // 是否启用
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 根据type类型，关联不同的值表
  textValue           ConfigTextValue?          // TEXT/TEXTAREA类型的值
  imageValue         ConfigImageValue?         // IMAGE类型的值
  multiImageValues    ConfigMultiImageValue[]   // MULTI_IMAGE类型的值
  multiTextValues     ConfigMultiTextValue[]    // MULTI_TEXT类型的值
  multiContentValues  ConfigMultiContentValue[] // MULTI_CONTENT类型的值

  @@index([type])
  @@index([sort])
  @@index([isEnabled])
}

// 文本类型配置值表（用于TEXT和TEXTAREA类型）
model ConfigTextValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int      @unique // 一对一关系
  value     String   @db.Text
  updatedAt DateTime @updatedAt

  @@index([configId])
}

// 图片类型配置值表（用于IMAGE类型）
model ConfigImageValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int      @unique // 一对一关系
  url       String   @db.VarChar(500)
  link      String?  @db.VarChar(500) // 可选的跳转链接
  alt       String?  @db.VarChar(200) // 图片描述
  updatedAt DateTime @updatedAt

  @@index([configId])
}

// 多图片类型配置值表（用于MULTI_IMAGE类型）
model ConfigMultiImageValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  url       String   @db.VarChar(500)
  link      String?  @db.VarChar(500) // 可选的跳转链接
  alt       String?  @db.VarChar(200) // 图片描述
  sort      Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([configId, sort])
}

// 多文本类型配置值表（用于MULTI_TEXT类型）
model ConfigMultiTextValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  title     String   @db.VarChar(200)
  content   String   @db.Text
  contentEn String?  @db.Text // 英文内容
  link      String?  @db.VarChar(500) // 可选的跳转链接
  sort      Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([configId, sort])
}

// 多文本图片混合类型配置值表（用于MULTI_CONTENT类型）
model ConfigMultiContentValue {
  id        Int      @id @default(autoincrement())
  config    Config   @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId  Int
  title     String   @db.VarChar(200)
  content   String   @db.Text
  contentEn String?  @db.Text // 英文内容
  imageUrl  String?  @db.VarChar(500)
  link      String?  @db.VarChar(500) // 可选的跳转链接
  alt       String?  @db.VarChar(200) // 图片描述
  sort      Int      @default(0)
  updatedAt DateTime @updatedAt

  @@index([configId, sort])
}

// Wiki模板点赞表
model WikiTemplateLike {
  id         Int          @id @default(autoincrement())
  templateId Int
  userId     Int
  createdAt  DateTime    @default(now())
  template   WikiTemplate @relation(fields: [templateId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@unique([userId, templateId])
}

