Wiki管理页面文档 (src/app/wikis/page.tsx)
=====================================================

文件概述
--------
这是一个基于 Next.js 和 React 构建的 Wiki 管理页面，使用 TypeScript 开发。
该页面为管理员提供了完整的 Wiki 内容管理功能，包括查看、审核、编辑和删除操作。

技术栈
------
- Next.js (App Router)
- React 18 (Hooks)
- TypeScript
- Ant Design (UI 框架)
- TailwindCSS (样式管理)
- SweetAlert2 (弹窗提示)
- Prisma (数据库 ORM)

主要功能
--------
1. Wiki 列表展示
   - 分页表格显示所有 Wiki 条目
   - 显示 Wiki 信息、创建者、图标、状态、统计数据等
   - 支持响应式布局，适配 PC 和移动端

2. 搜索和筛选
   - 实时搜索：支持按 Wiki 名称、标题、描述搜索
   - 状态筛选：可按审核状态筛选（全部、审核通过、待审核、审核失败、已发布）

3. Wiki 审核功能
   - 审核通过：管理员可以批准待审核的 Wiki
   - 审核拒绝：管理员可以拒绝 Wiki 并填写拒绝原因
   - 状态标签：用不同颜色标签显示 Wiki 状态

4. Wiki 管理操作
   - 查看详情：跳转到 Wiki 详情页面
   - 前台预览：在新标签页打开前台展示页面
   - 编辑功能：跳转到 Wiki 编辑页面
   - 删除功能：支持安全删除确认

5. 通知系统
   - 使用 Ant Design 的 notification 组件
   - 使用 SweetAlert2 提供美观的确认弹窗

组件结构
--------
WikisPage (主组件)
├── AdminLayout (管理后台布局)
├── Card (页面容器)
├── Row/Col (栅格布局)
├── Search (搜索输入框)
├── Select (状态筛选下拉框)
└── Table (数据表格)
    ├── Wiki信息列 (名称、标题、描述)
    ├── 创建者列 (头像、用户名、昵称)
    ├── 图标列 (Wiki 图标预览)
    ├── 状态列 (状态标签)
    ├── 统计列 (页面数、贡献者数、浏览数)
    ├── 创建时间列
    └── 操作列 (审核、查看、编辑、删除按钮)

状态管理
--------
使用 React Hooks 进行状态管理：
- wikis: WikiListItem[] - Wiki 列表数据
- searchTerm: string - 搜索关键词
- statusFilter: WikiStatus | 'all' - 状态筛选条件
- isLoading: boolean - 加载状态
- api: notification API - 通知 API 实例

数据类型
--------
WikiListItem 接口包含：
- id: number - Wiki ID
- name: string - Wiki 名称
- title: string - Wiki 标题
- description: string - Wiki 描述
- logo: string - Wiki 图标 URL
- status: WikiStatus - 审核状态
- creator: User - 创建者信息
- pageCount: number - 页面数量
- contributorCount: number - 贡献者数量
- viewCount: number - 浏览次数
- createdAt: string - 创建时间

WikiStatus 枚举：
- DRAFT: 草稿 (显示为"审核通过")
- PENDING: 待审核
- REJECTED: 已拒绝 (显示为"审核失败")
- PUBLISHED: 已发布

API 接口
--------
1. GET /api/wikis
   - 获取 Wiki 列表
   - 返回 WikiListItem[] 数组

2. DELETE /api/wikis/[id]
   - 删除指定 Wiki
   - 需要管理员权限

3. POST /api/wikis/[id]/approve
   - 审核通过 Wiki
   - 将状态从 PENDING 改为 PUBLISHED

4. POST /api/wikis/[id]/reject
   - 拒绝 Wiki 审核
   - 需要提供拒绝原因
   - 将状态从 PENDING 改为 REJECTED

核心函数
--------
1. fetchWikis()
   - 从 API 获取 Wiki 列表数据
   - 处理加载状态和错误处理

2. handleDeleteWiki(id: number)
   - 删除 Wiki 的处理函数
   - 使用 SweetAlert2 进行删除确认
   - 成功删除后刷新列表

3. handleApproveWiki(wikiId: number)
   - 审核通过 Wiki 的处理函数
   - 调用审核 API 并刷新列表
   - 显示成功通知

4. handleRejectWiki(wikiId: number)
   - 拒绝 Wiki 审核的处理函数
   - 弹出输入框要求填写拒绝原因
   - 提交拒绝原因并刷新列表

5. filteredWikis
   - 计算属性，根据搜索词和状态筛选 Wiki 列表
   - 支持多字段模糊搜索

样式特性
--------
- 使用 TailwindCSS 进行响应式设计
- 支持深色/浅色主题
- 移动端适配优化
- 语义化 HTML 标签，SEO 友好
- 无障碍访问支持

安全特性
--------
- 所有删除操作都有确认弹窗
- API 请求包含错误处理
- 用户权限验证（通过中间件）
- XSS 防护（Ant Design 内置）

性能优化
--------
- 使用 React.memo 优化组件渲染
- 图片懒加载和预览功能
- 分页表格避免一次性渲染大量数据
- 防抖搜索减少 API 调用

国际化
------
- 界面文字使用中文
- 日期格式本地化
- 数字格式化显示

错误处理
--------
- API 请求失败时显示错误通知
- 图片加载失败时显示默认图标
- 表单验证和用户输入校验
- 网络错误的友好提示

文件依赖
--------
- @/utils/request - HTTP 请求工具
- @/types/wiki - Wiki 相关类型定义
- @/components/layout/AdminLayout - 管理后台布局
- sweetalert2 - 弹窗组件
- @prisma/client - 数据库类型

部署注意事项
----------
- 确保环境变量配置正确
- 数据库连接正常
- 静态资源路径配置
- API 路由权限设置
- CORS 策略配置

维护建议
--------
1. 定期更新依赖包版本
2. 监控 API 性能和错误率
3. 用户反馈收集和处理
4. 数据备份和恢复策略
5. 安全漏洞扫描和修复

更新日志
--------
- 初始版本：基础 Wiki 管理功能
- 添加搜索和筛选功能
- 集成 SweetAlert2 弹窗
- 优化移动端适配
- 增加图片预览功能
- 完善错误处理机制

联系信息
--------
如有问题或建议，请联系开发团队。
项目仓库：https://github.com/your-repo/star_graph_admin
文档更新时间：2024年12月

